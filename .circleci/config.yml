version: 2.1
jobs:
  build:
    docker:
      - image: circleci/openjdk:17-buster
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - run: ./mvnw -Dmaven.test.skip=true package
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}
      - persist_to_workspace:
         root: ./
         paths:
           - target/
  test:
    docker:
      - image: circleci/openjdk:17-buster
        environment:
          DATABASE_NAME: ci_db
          DATABASE_USER: root
          DATABASE_PASSWORD: ''
          DB_DRIVER: com.mysql.cj.jdbc.Driver
      - image: circleci/mysql:8.0-ram
        command: [--default-authentication-plugin=mysql_native_password]
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
    steps:
      - checkout
      - run:
          name: Wait for Database Connection
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run: sudo apt-get update
      - run: sudo apt-get install default-mysql-client
      - run: mysql -h 127.0.0.1 -u root -e "CREATE DATABASE ci_db"
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            - v1-dependencies-
      - attach_workspace:
          at: ./target
      - run: ./mvnw test
      - store_artifacts:
          path:  target
  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  publish-latest:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push $IMAGE_NAME:latest
  heroku-release:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Tag image for Heroku push
          command: docker tag $IMAGE_NAME:latest $HEROKU_IMAGE:latest
      - run:
          name: Push Docker image to Heroku
          command: |
            set -x
            sudo curl https://cli-assets.heroku.com/install.sh | sh
            HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:login
            docker push $HEROKU_IMAGE:latest
            HEROKU_API_KEY=${HEROKU_API_KEY} heroku container:release -a jokr-back web
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: pacodevs/jokr
      HEROKU_IMAGE: registry.heroku.com/jokr-back/web
    docker:
      - image: circleci/buildpack-deps:stretch
workflows:
  version: 2
  app-docker-push:
    jobs:
      - build
      - test:
          requires:
            - build
      - docker-build:
          requires:
            - test
          filters:
            branches:
              only: master
      - publish-latest:
          requires:
            - docker-build
          filters:
            branches:
              only: master
      - heroku-release:
          requires:
            - publish-latest
          filters:
            branches:
              only: master
