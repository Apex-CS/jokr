package apex.ingagers.ecommerce;

import java.sql.Timestamp;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import apex.ingagers.ecommerce.table_repository.ProductsRepository;
import apex.ingagers.ecommerce.table_repository.UserRepository;
import apex.ingagers.ecommerce.tables.Products;
import apex.ingagers.ecommerce.tables.User;

@Controller // This means that this class is a Controller
@RequestMapping(path="/jokr") // This means URL's start with /demo (after Application path)
public class MainController {
  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  private ProductsRepository productsRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  //public @ResponseBody String addNewUser (@RequestParam String name, @RequestParam String email) {
    public @ResponseBody String addNewUser (@RequestBody Map<String,Object> values) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    String name = String.valueOf(values.get("name"));
    String email = String.valueOf(values.get("email"));

    User n = new User();
    n.setName(name);
    n.setEmail(email);
    userRepository.save(n);
    return "Saved";
  }

  @GetMapping(path="/show")
  public @ResponseBody Iterable<User> getAllUsers() {
    // This returns a JSON or XML with the users
    return userRepository.findAll();
  }



  @PostMapping(path="/addProducts") // Map ONLY POST Requests
  public @ResponseBody String addProducts (@RequestBody Map<String,Object> values) {
      String sku = String.valueOf(values.get("sku"));
      String name = String.valueOf(values.get("name"));
      String descripcion = String.valueOf(values.get("descripcion"));
      Float price = Float.parseFloat(String.valueOf(values.get("price")));
      int stock = Integer.parseInt(String.valueOf(values.get("stock")));
      String photo_file_name = String.valueOf(values.get("photo_file_name"));


      long now = System.currentTimeMillis();
      Timestamp sqlTimestamp = new Timestamp(now);


      Products p = new Products();
      p.setSku(sku);
      p.setName(name);
      p.setDescripcion(descripcion);
      p.setPrice(price);
      p.setDescripcion(descripcion);
      p.setCreated_at(sqlTimestamp);
      p.setUpdated_At(sqlTimestamp);
      productsRepository.save(p);
      return "Saved";
  }

  @GetMapping(path="/showProducts")
  public @ResponseBody Iterable<Products> getAllProducts() {
    // This returns a JSON or XML with the users
    return productsRepository.findAll();
  }




  @GetMapping(path="/test")
  public @ResponseBody String test() {
    return "This is a test";
  }
}
